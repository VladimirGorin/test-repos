require("dotenv").config({ path: "./assets/server/modules/.env" });
const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot(
  process.env.devStatus ? process.env.TEST_TOKEN : process.env.DEFAULT_TOKEN,
  { polling: true }
);
const db = require("./assets/db/db.json");
const {
  adminStartKeyboard,
  userStartKeyboard,
  arenaKeyboard,
  adminOptionsKeyboard,
  shopKeyboard,
} = require("./assets/keyboard/keyboard");
const {
  sendProfileData,
  changeName,
  myCards,
} = require("./assets/scripts/userFunctions/userFunctions");
const {
  setAdmin,
  giveCardToUser,
  findUser,
  createPromo,
  showAllUsers,
  askCardDetails,
} = require("./assets/scripts/adminFunctions/adminFunctions");
const {
  addToWaitingRoom,
  matchInventory,
  processCallback,
  checkAndCreateMatch,
} = require("./assets/scripts/matchFunctions/matchFunctions");
const { getPack } = require("./assets/scripts/shopFunctions/shopFunctions");
const { giveRandomCardToUser } = require("./assets/scripts/getCard/getCard");
const { top } = require("./assets/scripts/top/top");

const commands = JSON.parse(
  require("fs").readFileSync("./assets/db/commands/commands.json")
);


bot.setMyCommands(commands);

bot.on("message", async (msg) => {
  const channelUsername = "MCLPodPivomTournament";
    const username = msg.from.username;
  
  let user = db.find((user) => user.username === msg.from.username);

  if (msg.text === "/start") {
    try {
        const chatMember = await bot.getChatMember(`@${channelUsername}`, msg.from.id);

      if (
        chatMember.status === "member" ||
        chatMember.status === "administrator" ||
        chatMember.status === "creator"
      ) {
        if (!user) {
          db.push({
            username: msg.from.username,
            first_name: msg.from.first_name,
            last_name: msg.from.last_name,
            id: msg.chat.id,
            balance: 0,
            rating: null,
            inventory: [],
            matchInventory: [],
            isAdmin: false,
            isWaiting: false,
            isMatch: false,
            wonMatches: 0,
            looseMatches: 0,
          });
          require("fs").writeFileSync(
            "./assets/db/db.json",
            JSON.stringify(db, null, "\t")
          );
          await bot.sendMessage(
            msg.chat.id,
            `–ü—Ä–∏–≤–µ—Ç ${msg.from.username}`,
            userStartKeyboard
          );
        } else {
          const isAdminMessage = user.isAdmin ? "–í—ã –∞–¥–º–∏–Ω!" : "";
          await bot.sendMessage(
            msg.chat.id,
            `–ü—Ä–∏–≤–µ—Ç ${msg.from.username}. ${isAdminMessage}`,
            user.isAdmin ? adminStartKeyboard : userStartKeyboard
          );
        }
      } else {
        await bot.sendMessage(
          msg.chat.id,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        );
        return;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", error.message);
      await bot.sendMessage(
        msg.chat.id,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  } else if (msg.text === "/profile" || msg.text == "üë§ –õ–∏—á–Ω—ã–π –ü—Ä–æ—Ñ–∏–ª—å") {
    sendProfileData(bot, msg);
  } else if (msg.text === "/arenas" || msg.text == "‚öîÔ∏è –ê—Ä–µ–Ω—ã") {
    await bot.sendMessage(msg.chat.id, "–°–ø–∏—Å–æ–∫ –ê—Ä–µ–Ω", arenaKeyboard);
  } else if (msg.text === "/shop" || msg.text == "üõí –ú–∞–≥–∞–∑–∏–Ω –ø–∞–∫–æ–≤") {
    await bot.sendMessage(msg.chat.id, "–≤–æ—Ç –ø–∞–∫–∏ –Ω–∞ –≤—ã–±–æ—Ä", shopKeyboard);
  } else if (msg.text === "/getcard" || msg.text == "üÄÑÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É") {
    giveRandomCardToUser(bot, msg);
  } else if (msg.text === "‚öôÔ∏è –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å" && user.isAdmin) {
    await bot.sendMessage(
      msg.chat.id,
      "–≤–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å",
      adminOptionsKeyboard
    );
  } else if (
    msg.text === "üÄÑÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –º–∞—Ç—á–µ–π" ||
    "/addcardtomatch"
  ) {
    matchInventory(bot, msg);
  } else if (msg.text === "/top") {
    top(bot, msg);
  } else {
    await bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É");
  }
});

bot.on("callback_query", async (msg) => {
  try {
    if (msg.data === "cardAmount") {
      askCardDetails(bot, msg);
    } else if (msg.data === "createPromo") {
      createPromo(bot, msg);
      console.log("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } else if (msg.data === "showAllUsers") {
      showAllUsers(bot, msg);
    } else if (msg.data === "findUser") {
      await bot.sendMessage(
        msg.message.chat.id,
        "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );
      await findUser(bot, msg);
    } else if (msg.data === "addCardToUser") {
      await giveCardToUser(bot, msg);
    } else if (msg.data === "setAdmin") {
      await bot.sendMessage(
        msg.message.chat.id,
        "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );
      bot.once("message", (msg) => setAdmin(bot, msg));
    } else if (msg.data === "usualmatch") {
      await addToWaitingRoom(bot, msg);
    } else if (msg.data === "getonepack") {
      getPack(bot, msg, 1);
    } else if (msg.data === "getfivepacks") {
      getPack(bot, msg, 5);
    } else if (msg.data === "gettenpacks") {
      getPack(bot, msg, 10);
    } else if (msg.data === "rating") {
      processCallback(bot, msg);
    } else if (msg.data === "usual") {
      checkAndCreateMatch(bot, msg);
    } else if (msg.data === "changename") {
      changeName(bot, msg);
    } else if (msg.data === "mycards") {
      myCards(bot, msg);
    } else if (msg.data === "closewindow") {
      await bot.sendMessage(
        msg.chat.id,
        "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω –≤–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å",
        adminStartKeyboard
      );
    } else {
      await bot.sendMessage(msg.message.chat.id, "–¢–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞:", error);
  }
});

bot.on("polling_error", console.log);
